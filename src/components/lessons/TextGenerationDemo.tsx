import React, { useState } from 'react';
import { useAuthStore } from '../../store/authStore';
import { deductTokens } from '../../utils/tokenManager';
import { sendPrompt } from '../../utils/promptHandler';
import '../../styles/lessons/TextGenerationDemo.css';

export default function TextGenerationDemo() {
  const { user, tokens, setTokens } = useAuthStore();
  const [prompt, setPrompt] = useState('');
  const [generatedText, setGeneratedText] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');

  const handleGenerate = async () => {
    if (!user) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É');
      return;
    }

    if (tokens < 10) {
      setError('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ (—Ç—Ä–µ–±—É–µ—Ç—Å—è 10)');
      return;
    }

    if (!prompt.trim()) {
      setError('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞');
      return;
    }

    setIsLoading(true);
    setError('');

    try {
      const newTokens = await deductTokens(user.uid, tokens, 10);
      setTokens(newTokens);

      const response = await sendPrompt(prompt, '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞');
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—é –¥–ª—è –∞–±–∑–∞—Ü–µ–≤
      const formattedText = response.response
        .split('\n\n')
        .map(paragraph => `<p>${paragraph}</p>`)
        .join('');
        
      setGeneratedText(formattedText);
    } catch (error) {
      console.error('Error generating text:', error);
      setError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="text-generation-demo">
      <h3>–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ</h3>
      
      <div className="demo-container">
        <div className="input-section">
          <label htmlFor="prompt">–í–∞—à –ø—Ä–æ–º–ø—Ç:</label>
          <textarea
            id="prompt"
            value={prompt}
            onChange={(e) => setPrompt(e.target.value)}
            placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞..."
            disabled={isLoading}
          />
          
          <div className="controls">
            <span className="token-info">–°—Ç–æ–∏–º–æ—Å—Ç—å: 10 ü™ô</span>
            <button
              onClick={handleGenerate}
              disabled={isLoading || !user || tokens < 10}
              className="generate-button"
            >
              {isLoading ? '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...' : '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç'}
            </button>
          </div>
          
          {error && <div className="error-message">{error}</div>}
        </div>

        {generatedText && (
          <div className="output-section">
            <h4>–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:</h4>
            <div 
              className="generated-content"
              dangerouslySetInnerHTML={{ __html: generatedText }}
            />
          </div>
        )}
      </div>
    </div>
  );
}