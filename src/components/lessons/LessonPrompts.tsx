import React from 'react';
import { useState, useRef } from 'react';
import { useAuthStore } from '../../store/authStore'; 
import { deductTokens, refundTokens } from '../../utils/tokenManager';
import { sendPrompt } from '../../utils/promptHandler';
import '../../styles/lessons/LessonPrompts.css';

interface LessonPromptsProps {
  lessonTitle: string;
}

const defaultPrompts = [
  '–ú–æ–∂–µ—Ç–µ –æ–±—ä—è—Å–Ω–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –ø—Ä–æ —Ä–æ–ª–∏ –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞?',
  '–ö–∞–∫–∏–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫?',
  '–ü—Ä–∏–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—Ä—ã —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞',
  '–ö–∞–∫–∏–µ soft skills –≤–∞–∂–Ω—ã –¥–ª—è –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞?',
  '–ö–∞–∫ –Ω–∞—á–∞—Ç—å –∫–∞—Ä—å–µ—Ä—É –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞?'
];

export default function LessonPrompts({ lessonTitle }: LessonPromptsProps) {
  const { user, tokens, setTokens } = useAuthStore();
  const [isLoading, setIsLoading] = useState(false);
  const [customPrompt, setCustomPrompt] = useState('');
  const [response, setResponse] = useState<string | null>(null);
  const promptInputRef = useRef<HTMLTextAreaElement>(null);

  const handlePromptClick = async (prompt: string) => {
    if (!user) {
      setResponse('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É —á—Ç–æ–±—ã –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã');
      return;
    }

    if (tokens < 5) {
      setResponse('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–æ–ø—Ä–æ—Å–∞');
      return;
    }

    setIsLoading(true);
    setResponse(null);
    
    try {
      const newTokens = await deductTokens(user.uid, tokens, 5);
      setTokens(newTokens);

      const data = await sendPrompt(prompt, lessonTitle);
      
      setResponse(data.response);
      
    } catch (error) {
      console.error('Error sending prompt:', error);
      
      const refundedTokens = await refundTokens(user.uid, tokens, 5);
      setTokens(refundedTokens);
      
      setResponse(
        '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞. –¢–æ–∫–µ–Ω—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã. ' +
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      );
    } finally {
      setIsLoading(false);
      if (response) {
        window.scrollTo({ 
          top: document.body.scrollHeight, 
          behavior: 'smooth' 
        });
      }
    }
  };

  const handleCustomPrompt = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!customPrompt.trim()) return;
    
    await handlePromptClick(customPrompt);
    setCustomPrompt('');
  };

  const clearResponse = () => {
    setResponse(null);
  };

  return (
    <div className="lesson-prompts">
      <h3>–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã</h3>
      <div className="prompts-list">
        {defaultPrompts.map((prompt, index) => (
          <button
            key={index}
            className="prompt-button"
            onClick={() => !isLoading && handlePromptClick(prompt)}
            disabled={!user || tokens < 5}
          >
            {prompt}
            <span className="token-cost">5 ü™ô</span>
          </button>
        ))}
      </div>
      
      <div className="custom-prompt">
        <h3>–ó–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å</h3>
        <form onSubmit={handleCustomPrompt}>
          <textarea
            ref={promptInputRef}
            value={customPrompt}
            onChange={(e) => setCustomPrompt(e.target.value)}
            placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å..."
            disabled={isLoading || !user || tokens < 5}
          />
          <div className="prompt-controls">
            <span className="token-cost">5 ü™ô</span>
            <button
              type="submit"
              className="submit-prompt"
              disabled={isLoading || !user || tokens < 5 || !customPrompt.trim()}
            >
              –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å
            </button>
          </div>
        </form>
      </div>
      {!user && (
        <p className="login-prompt">
          <a href="/login">–í–æ–π–¥–∏—Ç–µ</a> –∏–ª–∏ <a href="/register">–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å</a> —á—Ç–æ–±—ã –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã
        </p>
      )}
      {isLoading && (
        <div className="loading-state">
          <div className="spinner"></div>
          <p>–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...</p>
        </div>
      )}
      {response && (
        <div className="ai-response">
          <div className="response-content">{response}</div>
          <button onClick={clearResponse} className="close-response">
            ‚úï
          </button>
        </div>
      )}
    </div>
  );
}